name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        # 리포지토리에서 코드를 체크아웃하여 후속 단계에서 사용할 수 있게 합니다.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
        # Gradle 빌드를 위해 JDK 17을 설정합니다.

      - name: Get list of modified services
        id: changes
        run: |
          # git diff를 사용하여 수정된 디렉토리(서비스)를 찾습니다.
          changes=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '/gradlew' | cut -d/ -f1 | sort -u)
          echo "Modified services: $changes"
          echo "::set-output name=changed-services::$changes"
        # 어떤 서비스(gradlew 파일이 있는 디렉토리)가 수정되었는지 확인합니다.
        # 수정된 서비스 목록은 `changed-services`로 저장됩니다.

      - name: Display changed services
        run: |
          # 수정된 서비스 목록을 출력합니다. 디버깅용으로 사용됩니다.
          echo "다음 서비스들이 수정되었습니다:"
          echo "${{ steps.changes.outputs.changed-services }}"
        # 변경된 서비스 목록을 출력하여 확인할 수 있습니다.

      - name: Build changed services
        run: |
          # 수정된 각 서비스를 빌드합니다. 수정되지 않은 서비스는 빌드하지 않습니다.
          echo "수정된 서비스들을 빌드합니다..."
          for service in ${{ steps.changes.outputs.changed-services }}; do
            echo "서비스 빌드 시작: $service"
            if [ -f "$service/gradlew" ]; then
              chmod +x $service/gradlew
              $service/gradlew build -x test -p $service
            else
              echo "$service에 gradlew 파일이 없으므로 건너뜁니다..."
            fi
          done
        # 수정된 각 서비스에 대해 `gradlew build` 명령어를 실행합니다.
        # `gradlew` 파일이 없다면 해당 서비스를 건너뛰고 메시지를 출력합니다.
